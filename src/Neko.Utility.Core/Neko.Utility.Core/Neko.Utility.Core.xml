<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Neko.Utility.Core</name>
    </assembly>
    <members>
        <member name="T:Neko.Utility.Core.Common.InvokeCode">
            <summary>
            调用代码帮助类
            </summary>
        </member>
        <member name="F:Neko.Utility.Core.Common.InvokeCode._codeQueue">
            <summary>
            要执行的方法的队列
            </summary>
        </member>
        <member name="P:Neko.Utility.Core.Common.InvokeCode.CodeStacks">
            <summary>
            获取要执行的方法的队列
            </summary>
        </member>
        <member name="P:Neko.Utility.Core.Common.InvokeCode.IsBreak">
            <summary>
            是否中断执行并跳出方法
            </summary>
        </member>
        <member name="P:Neko.Utility.Core.Common.InvokeCode.IsFinaly">
            <summary>
            当前正在执行的方法是否是方法队列的最后一个方法
            </summary>
        </member>
        <member name="M:Neko.Utility.Core.Common.InvokeCode.Add(Neko.Utility.Core.EmptyDelegateCode)">
            <summary>
            将一个方法添加到要执行的方法的队列列尾
            </summary>
            <param name="executeCode">委托方法</param>
        </member>
        <member name="M:Neko.Utility.Core.Common.InvokeCode.Shift(Neko.Utility.Core.EmptyDelegateCode)">
            <summary>
            将一个方法添加到要执行的方法的队列列头
            </summary>
            <param name="executeCode">委托方法</param>
        </member>
        <member name="M:Neko.Utility.Core.Common.InvokeCode.Insert(System.Int32,Neko.Utility.Core.EmptyDelegateCode)">
            <summary>
            在队列指定位置插入一个要执行的方法
            </summary>
            <param name="index">位置索引</param>
            <param name="executeCode">委托方法</param>
        </member>
        <member name="M:Neko.Utility.Core.Common.InvokeCode.RemoveAt(System.Int32)">
            <summary>
            删除队列指定位置的一个方法
            </summary>
            <param name="index">委托方法</param>
        </member>
        <member name="M:Neko.Utility.Core.Common.InvokeCode.Remove(Neko.Utility.Core.EmptyDelegateCode)">
            <summary>
            从队列中删除一个方法
            </summary>
            <param name="executeCode">委托方法</param>
        </member>
        <member name="M:Neko.Utility.Core.Common.InvokeCode.Execute">
            <summary>
            开始循环执行队列的所有方法
            </summary>
        </member>
        <member name="M:Neko.Utility.Core.Common.InvokeCode.ExecuteNext">
            <summary>
            执行队列中的第一个方法
            </summary>
        </member>
        <member name="M:Neko.Utility.Core.Common.InvokeCode.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            以异步的方式循环执行队列的所有方法
            </summary>
            <param name="cancelToken">取消异步执行的信号</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Common.InvokeCode.ExecuteNextAsync(System.Threading.CancellationToken)">
            <summary>
            以异步的方式执行队列中的第一个方法
            </summary>
            <param name="cancelToken">取消异步执行的信号</param>
            <returns></returns>
        </member>
        <member name="T:Neko.Utility.Core.Common.QrCodeUtil">
            <summary>
            二维码/条形码帮助类
            <para>可以生成和读取二维码或条形码</para>
            </summary>
        </member>
        <member name="M:Neko.Utility.Core.Common.QrCodeUtil.GenerateQrCode(System.String,Neko.Utility.Core.Configurations.GenerateCodeConfiguration)">
            <summary>
            生成二维码
            </summary>
            <param name="content">要生成的二维码的内容</param>
            <param name="configuration">生成二维码的配置<para>为空时使用<see cref="P:Neko.Utility.Core.Configurations.GenerateCodeConfiguration.QrCodeDefault"/></para></param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Common.QrCodeUtil.GenerateQrCode(System.String,System.String,Neko.Utility.Core.Configurations.GenerateCodeConfiguration)">
            <summary>
            生成二维码
            </summary>
            <param name="content">要生成的二维码的内容</param>
            <param name="logoPath">二维码上图标文件的路径(为空时则不会生成图标)</param>
            <param name="configuration">生成二维码的配置<para>为空时使用<see cref="P:Neko.Utility.Core.Configurations.GenerateCodeConfiguration.QrCodeDefault"/></para></param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Common.QrCodeUtil.GenerateQrCode(System.String,System.Drawing.Bitmap,Neko.Utility.Core.Configurations.GenerateCodeConfiguration)">
            <summary>
            生成二维码
            </summary>
            <param name="content">要生成的二维码的内容</param>
            <param name="logo">二维码上图标的<see cref="T:System.Drawing.Bitmap"/>资源(为空时则不会生成图标)</param>
            <param name="configuration">生成二维码的配置<para>为空时使用<see cref="P:Neko.Utility.Core.Configurations.GenerateCodeConfiguration.QrCodeDefault"/></para></param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Common.QrCodeUtil.DrawCodeLogo(System.Drawing.Bitmap,System.Int32[],System.Drawing.Bitmap,Neko.Utility.Core.Configurations.GenerateCodeConfiguration)">
            <summary>
            绘制二维码logo
            </summary>
            <param name="codeBitmap">要绘制logo的二维码<see cref="T:System.Drawing.Bitmap"/>资源</param>
            <param name="matrixRectangle">要绘制logo的二维码<see cref="T:System.Drawing.Bitmap"/>资源的矩阵信息
            <para>
            <list type="bullet">
            <item>矩阵第0位:左边距</item>
            <item>矩阵第1位:上边距</item>
            <item>矩阵第2位:二维码的宽</item>
            <item>矩阵第0位:二维码的高</item>
            </list>
            </para>
            </param>
            <param name="codeLogo">logo的<see cref="T:System.Drawing.Bitmap"/>资源</param>
            <param name="configuration">生成二维码/条码的配置</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Common.QrCodeUtil.GenerateBarCode(System.String,Neko.Utility.Core.Configurations.GenerateCodeConfiguration)">
            <summary>
            生成条形码
            </summary>
            <param name="content">要生成的条形码的内容</param>
            <param name="configuration">生成条形码的配置<para>为空时使用<see cref="P:Neko.Utility.Core.Configurations.GenerateCodeConfiguration.BarCodeDefault"/></para></param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Common.QrCodeUtil.ReadCode(System.String,System.String)">
            <summary>
            读取二维码/条形码
            </summary>
            <param name="imagePath">二维码/条形码图片路径</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Common.QrCodeUtil.ReadCode(System.Drawing.Bitmap,System.String)">
            <summary>
            读取二维码/条形码
            </summary>
            <param name="codeImage">二维码/条形码的<see cref="T:System.Drawing.Bitmap"/>资源</param>
            <returns></returns>
        </member>
        <member name="T:Neko.Utility.Core.Common.RandomUtil">
            <summary>
            <see cref="T:System.Random"/>帮助类
            <para>用于生成随机数字字符串(基于<see cref="T:System.Guid"/>的<see cref="M:System.Guid.GetHashCode"/>)</para>
            <para>以及根据权重从一个列表中随机返回一定数量的元素(可用于抽奖等场景)</para>
            </summary>
        </member>
        <member name="M:Neko.Utility.Core.Common.RandomUtil.Next(System.Int32,System.Boolean)">
            <summary>
            随机生成一组数字
            </summary>
            <param name="count">要生成的数字的个数</param>
            <param name="canRepeat">是否允许重复数字</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Common.RandomUtil.Next(System.Random,System.Int32,System.Boolean)">
            <summary>
            随机生成一组数字
            </summary>
            <param name="random">随机数生成器</param>
            <param name="count">要生成的数字的个数</param>
            <param name="canRepeat">是否允许重复数字</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Common.RandomUtil.Draw``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            获取一组对象中的前<paramref name="count"/>个元素
            </summary>
            <typeparam name="Titem">对象的类型</typeparam>
            <param name="items">要获取元素的数组</param>
            <param name="count">要获取元素的个数</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Common.RandomUtil.Draw``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{System.Double},System.Int32)">
            <summary>
            根据<paramref name="odds"/>分配的权重随机返回一组对象中前<paramref name="count"/>个元素
            </summary>
            <typeparam name="Titem">对象的类型</typeparam>
            <param name="random">随机数生成器</param>
            <param name="items">要获取元素的数组</param>
            <param name="odds">分配的权重,权重元素位置与<paramref name="items"/>的元素位置相对应</param>
            <param name="count">要获取元素的个数</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Common.RandomUtil.Draw``1(System.Collections.Generic.IDictionary{``0,System.Double},System.Int32)">
            <summary>
            根据<paramref name="oddsMap"/>的值进行排序并返回前<paramref name="count"/>个元素
            </summary>
            <typeparam name="Titem">对象的类型</typeparam>
            <param name="oddsMap">元素和权重的键值对</param>
            <param name="count">要获取元素的个数</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Common.RandomUtil.GenerateRandomNo(System.Int32)">
            <summary>
            生成随机数字字符串
            <para>注意:因为是根据<see cref="M:System.Guid.GetHashCode"/>来生成的随机数,<br/>
            所以短时间内多次调用此方法的话,生成重复的字符串的概率较大</para>
            </summary>
            <param name="length">字符串的长度</param>
            <returns></returns>
        </member>
        <member name="T:Neko.Utility.Core.Common.ReferenceUtil">
            <summary>
            <see cref="N:System.Reflection"/>帮助类
            <para>可以快速获取程序集,类型和实例化类型</para>
            </summary>
        </member>
        <member name="M:Neko.Utility.Core.Common.ReferenceUtil.GetDefaultAssembly">
            <summary>
            获取当前程序的程序集
            </summary>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Common.ReferenceUtil.GetAssemblyByName(System.String)">
            <summary>
            根据名称获取程序集
            <para>如果<paramref name="assemblyName"/>为空则获取当前程序集</para>
            </summary>
            <param name="assemblyName">程序集名称</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Common.ReferenceUtil.GetAssemblyByDll(System.String)">
            <summary>
            根据文件路径加载文件下的程序集
            <para>如果<paramref name="dllName"/>为空则获取当前程序集</para>
            </summary>
            <param name="dllName">文件路径</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Common.ReferenceUtil.GetAssembly(System.String)">
            <summary>
            根据传入的参数自动判断是根据名称获取程序集还是根据文件获取程序集<br/>
            如果<paramref name="assemblyName"/>为空则获取当前程序集
            </summary>
            <param name="assemblyName">程序集名称或文件路径</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Common.ReferenceUtil.GetType(System.String)">
            <summary>
            获取当前程序集下特定的类型
            <para>当<paramref name="typeName"/>为类型的简称时(如Program),<br/>获取的是当前程序集下的Program</para>
            </summary>
            <param name="typeName">类型的名称</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Common.ReferenceUtil.GetType(System.Reflection.Assembly,System.String)">
            <summary>
            获取程序集下特定的类型
            </summary>
            <param name="assembly">程序集</param>
            <param name="typeName">类型的名称</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Common.ReferenceUtil.Instance``1(System.String,System.Object[])">
            <summary>
            实例化一个类型
            <para>类似依赖注入</para>
            </summary>
            <typeparam name="Ttype">实力类型</typeparam>
            <param name="typeName">类型名称</param>
            <param name="constructParams">类型构造函数需要的参数</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Common.ReferenceUtil.Instance(System.String,System.Object[])">
            <summary>
            实例化一个类型
            <para>类似依赖注入</para>
            </summary>
            <param name="typeName">类型名称</param>
            <param name="constructParams">类型构造函数需要的参数</param>
            <returns></returns>
        </member>
        <member name="T:Neko.Utility.Core.Common.SerializeUtil">
            <summary>
            序列化帮助类
            <para>可以帮助快速操作<br/>二进制序列化<br/>json序列化<br/>xml序列化</para>
            </summary>
        </member>
        <member name="M:Neko.Utility.Core.Common.SerializeUtil.ToBinary(System.Object)">
            <summary>
            将一个对象序列化为二进制数据
            </summary>
            <param name="fromObject">要序列化的对象</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Common.SerializeUtil.FromBinary``1(System.Byte[])">
            <summary>
            将一个二进制数组反序列化为一个对象
            </summary>
            <typeparam name="Tobject">对象类型</typeparam>
            <param name="binaryBytes">二进制数组</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Common.SerializeUtil.FromBinary``1(System.IO.Stream)">
            <summary>
            将一个<see cref="T:System.IO.Stream"/>反序列化为一个对象
            </summary>
            <typeparam name="Tobject">对象类型</typeparam>
            <param name="binaryStream">要反序列化的流<see cref="T:System.IO.Stream"/></param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Common.SerializeUtil.FromBinary(System.Byte[])">
            <summary>
            将一个二进制数组反序列化为一个对象
            </summary>
            <param name="binaryBytes">二进制数组</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Common.SerializeUtil.FromBinary(System.IO.Stream)">
            <summary>
            将一个<see cref="T:System.IO.Stream"/>反序列化为一个对象
            </summary>
            <param name="binaryStream">要反序列化的流<see cref="T:System.IO.Stream"/></param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Common.SerializeUtil.ToJson(System.Object)">
            <summary>
            将一个对象序列化为Json字符串
            </summary>
            <param name="fromObject">要序列化的对象</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Common.SerializeUtil.ToJson(System.Object,System.Boolean)">
            <summary>
            将一个对象序列化为Json字符串
            </summary>
            <param name="fromObject">要序列化的对象</param>
            <param name="formatJson">是否格式化json</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Common.SerializeUtil.FromJson(System.String)">
            <summary>
            将一个json字符串反序列化为一个对象
            </summary>
            <param name="jsonString">json字符串</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Common.SerializeUtil.FromJson``1(System.String)">
            <summary>
            将一个json字符串反序列化为一个对象
            </summary>
            <typeparam name="Tobject">对象类型</typeparam>
            <param name="jsonString">json字符串</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Common.SerializeUtil.GetJson``1(System.String,System.String)">
            <summary>
            获取Json中一个节点的值
            </summary>
            <typeparam name="Tvalue">要获取的值的类型</typeparam>
            <param name="jsonString">Json字符串</param>
            <param name="key">节点名称</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Common.SerializeUtil.GetJson(System.String,System.String)">
            <summary>
            获取Json中一个节点的值
            </summary>
            <param name="jsonString">Json字符串</param>
            <param name="key">节点名称</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Common.SerializeUtil.ToXml(System.Object)">
            <summary>
            将一个对象序列化为xml格式的二进制数据
            </summary>
            <param name="fromObject">要序列化的对象</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Common.SerializeUtil.FromXml(System.String)">
            <summary>
            将一个xml数据反序列化为一个对象
            </summary>
            <param name="xmlString">xml字符串</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Common.SerializeUtil.FromXml(System.Byte[])">
            <summary>
            将一个xml数据反序列化为一个对象
            </summary>
            <param name="xmlBytes">xml数据的二进制数组</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Common.SerializeUtil.FromXml(System.IO.Stream)">
            <summary>
            将一个xml数据反序列化为一个对象
            </summary>
            <param name="xmlStream">xml数据流</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Common.SerializeUtil.FromXml``1(System.String)">
            <summary>
            将一个xml数据反序列化为一个对象
            </summary>
            <typeparam name="Tvalue">对象类型</typeparam>
            <param name="xmlString">xml字符串</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Common.SerializeUtil.FromXml``1(System.Byte[])">
            <summary>
            将一个xml数据反序列化为一个对象
            </summary>
            <typeparam name="Tvalue">对象类型</typeparam>
            <param name="xmlString">xml数据的二进制数组</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Common.SerializeUtil.FromXml``1(System.IO.Stream)">
            <summary>
            将一个xml数据反序列化为一个对象
            </summary>
            <typeparam name="Tvalue">对象类型</typeparam>
            <param name="xmlString">xml数据流</param>
            <returns></returns>
        </member>
        <member name="P:Neko.Utility.Core.Configurations.GenerateCodeConfiguration.CodeMargin">
            <summary>
            二维码/条形码的边距
            </summary>
        </member>
        <member name="P:Neko.Utility.Core.Configurations.GenerateCodeConfiguration.CodeWidth">
            <summary>
            二维码/条形码的长
            </summary>
        </member>
        <member name="P:Neko.Utility.Core.Configurations.GenerateCodeConfiguration.CodeHeight">
            <summary>
            二维码/条形码的宽
            </summary>
        </member>
        <member name="P:Neko.Utility.Core.Configurations.GenerateCodeConfiguration.LogoWidth">
            <summary>
            二维码logo的长
            <para>仅在生成二维码时有效</para>
            </summary>
        </member>
        <member name="P:Neko.Utility.Core.Configurations.GenerateCodeConfiguration.LogoHeight">
            <summary>
            二维码logo的宽
            <para>仅在生成二维码时有效</para>
            </summary>
        </member>
        <member name="P:Neko.Utility.Core.Configurations.GenerateCodeConfiguration.CodeCharset">
            <summary>
            二维码/条形码的内容编码
            </summary>
        </member>
        <member name="P:Neko.Utility.Core.Configurations.GenerateCodeConfiguration.QrCodeDefault">
            <summary>
            生成二维码的默认配置
            </summary>
        </member>
        <member name="P:Neko.Utility.Core.Configurations.GenerateCodeConfiguration.BarCodeDefault">
            <summary>
            生成条形码的默认配置
            </summary>
        </member>
        <member name="M:Neko.Utility.Core.Configurations.GenerateCodeConfiguration.InitBarCodeDefault">
            <summary>
            初始化条形码默认配置
            </summary>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Configurations.GenerateCodeConfiguration.InitQrCodeDefault">
            <summary>
            初始化二维码默认配置
            </summary>
            <returns></returns>
        </member>
        <member name="T:Neko.Utility.Core.Configurations.LogConfiguration">
            <summary>
            日志的配置信息
            </summary>
        </member>
        <member name="P:Neko.Utility.Core.Configurations.LogConfiguration.Instance">
            <summary>
            配置信息的单例
            </summary>
        </member>
        <member name="P:Neko.Utility.Core.Configurations.LogConfiguration.RecordMinimumInterval">
            <summary>
            记录日志最小间隔(单位毫秒)
            </summary>
        </member>
        <member name="P:Neko.Utility.Core.Configurations.LogConfiguration.LogPath">
            <summary>
            记录日志的路径
            </summary>
        </member>
        <member name="P:Neko.Utility.Core.Configurations.LogConfiguration.LogFileName">
            <summary>
            记录日志文件的文件名
            </summary>
        </member>
        <member name="P:Neko.Utility.Core.Configurations.LogConfiguration.LogLevel">
            <summary>
            记录日志的等级
            </summary>
        </member>
        <member name="P:Neko.Utility.Core.Configurations.LogConfiguration.AddConsole">
            <summary>
            是否输出到控制台
            </summary>
        </member>
        <member name="P:Neko.Utility.Core.Configurations.LogConfiguration.AddDebug">
            <summary>
            是否输出到输出窗口<see cref="M:System.Diagnostics.Debug.Print(System.String)"/>
            </summary>
        </member>
        <member name="M:Neko.Utility.Core.Configurations.LogConfiguration.GetConfiguration">
            <summary>
            获取配置信息的单例对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:Neko.Utility.Core.Configurations.LogLevel">
            <summary>
            日志等级
            </summary>
        </member>
        <member name="F:Neko.Utility.Core.Configurations.LogLevel.Track">
            <summary>
            步骤日志,一般用于开发
            </summary>
        </member>
        <member name="F:Neko.Utility.Core.Configurations.LogLevel.Information">
            <summary>
            普通信息日志
            </summary>
        </member>
        <member name="F:Neko.Utility.Core.Configurations.LogLevel.Warning">
            <summary>
            警告信息日志
            </summary>
        </member>
        <member name="F:Neko.Utility.Core.Configurations.LogLevel.Exception">
            <summary>
            异常信息日志
            </summary>
        </member>
        <member name="T:Neko.Utility.Core.Data.DictionaryUtil">
            <summary>
            字典帮助类
            <para>可以对键值对进行一些快速操作</para>
            </summary>
        </member>
        <member name="M:Neko.Utility.Core.Data.DictionaryUtil.Get(System.Collections.IDictionary,System.String)">
            <summary>
            根据key获取键值对中对应的值
            </summary>
            <param name="dictionary">要获取值的键值对</param>
            <param name="key">要获取值的键</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Data.DictionaryUtil.Get``1(System.Collections.Generic.IDictionary{System.String,``0},System.String)">
            <summary>
            根据key获取键值对中对应的值
            </summary>
            <typeparam name="Tvalue">要取值的类型</typeparam>
            <param name="dictionary">要获取值的键值对</param>
            <param name="key">要获取值的键</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Data.DictionaryUtil.Get``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            根据key获取键值对中对应的值
            </summary>
            <typeparam name="Tkey">键值对键的类型</typeparam>
            <typeparam name="Tvalue">要取值的类型</typeparam>
            <param name="dictionary">要获取值的键值对</param>
            <param name="key">要获取值的键</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Data.DictionaryUtil.Convert(System.Object)">
            <summary>
            将一个对象<see cref="T:System.Object"/>转换为字典
            <para>当<see cref="T:System.Object"/>为类,且类包含方法时,不建议转换为字典</para>
            </summary>
            <param name="target">要转换的对象</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Data.DictionaryUtil.SortDictionary``2(System.Collections.Generic.IDictionary{``0,``1},System.Boolean)">
            <summary>
            根据键值对的Key或Value进行排序
            <para>使用此方法时,排序字段必须要能够进行减法运算</para>
            </summary>
            <typeparam name="Tkey">键值对的键</typeparam>
            <typeparam name="Tvalue">键值对的值</typeparam>
            <param name="dictionary">要排序的键值对</param>
            <param name="sortByValue">是否根据值进行排序<para>为true时按照Value排序,否则按照Key排序</para></param>
            <returns></returns>
        </member>
        <member name="T:Neko.Utility.Core.Data.EnumUtil">
            <summary>
            枚举帮助类
            <para>可以快速转换一些枚举类型</para>
            </summary>
        </member>
        <member name="M:Neko.Utility.Core.Data.EnumUtil.Convert``1(System.String,``0)">
            <summary>
            将一个对象转换为枚举类型
            </summary>
            <typeparam name="TEnum">枚举类型</typeparam>
            <param name="value">要转换的对象</param>
            <param name="defaultValue">当转换失败时返回的默认值</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Data.EnumUtil.Convert``1(System.String)">
            <summary>
            将一个对象转换为枚举类型
            </summary>
            <typeparam name="TEnum">枚举类型</typeparam>
            <param name="value">要转换的对象</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Data.EnumUtil.Convert(System.Type,System.String,System.Object)">
            <summary>
            将一个对象转换为枚举类型
            </summary>
            <param name="enumType">枚举类型</param>
            <param name="value">要转换的对象</param>
            <param name="defaultValue">当转换失败时返回的默认值</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Data.EnumUtil.Convert(System.Type,System.String)">
            <summary>
            将一个对象转换为枚举类型
            </summary>
            <param name="enumType">枚举类型</param>
            <param name="value">要转换的对象</param>
            <returns></returns>
        </member>
        <member name="T:Neko.Utility.Core.Data.ObjectUtil">
            <summary>
            <see cref="T:System.Object"/>对象帮助类
            <para>包含了一些快速操作<see cref="T:System.Object"/>对象的方法</para>
            </summary>
            <summary>
            <see cref="T:System.Object"/>对象帮助类(关于从对象获取值的部分)
            <para>包含了一些快速操作<see cref="T:System.Object"/>对象的方法</para>
            </summary>
            <summary>
            <see cref="T:System.Object"/>对象帮助类(关于设置对象的值的部分)
            <para>包含了一些快速操作<see cref="T:System.Object"/>对象的方法</para>
            </summary>
        </member>
        <member name="M:Neko.Utility.Core.Data.ObjectUtil.CanWrite(System.Type,System.Object)">
            <summary>
            判断一个对象<see cref="T:System.Object"/>是否可以写入指定的类型中
            </summary>
            <param name="targetType">要写入的类型</param>
            <param name="value">要判断的对象<see cref="T:System.Object"/></param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Data.ObjectUtil.ConvertList(System.Collections.IList)">
            <summary>
            将<see cref="T:Newtonsoft.Json.Linq.JObject"/>转换为数组
            </summary>
            <param name="list">要转换的对象</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Data.ObjectUtil.WriteTo(System.Object,System.Object)">
            <summary>
            将一个对象<paramref name="fromObject"/>的所有字段属性的值写入<paramref name="targetObject"/>
            </summary>
            <param name="fromObject">要写入的对象</param>
            <param name="targetObject">被写入的对象</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Data.ObjectUtil.Convert``1(System.Object,``0)">
            <summary>
            将一个对象转换为另一个对象
            <para>名称相同的属性/字段将会被赋值到目标对象<paramref name="targetObject"/></para>
            </summary>
            <typeparam name="TObject">目标对象<paramref name="targetObject"/>的类型</typeparam>
            <param name="fromObject">要转换的对象</param>
            <param name="targetObject">要被转换的对象</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Data.ObjectUtil.Convert``1(System.Object)">
            <summary>
            将一个对象转换为另一个类型的对象
            <para>名称相同的属性/字段将会被赋值到目标对象<paramref name="targetObject"/></para>
            </summary>
            <typeparam name="TObject">要被转换到的类型</typeparam>
            <param name="fromObject">要转换的对象</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Data.ObjectUtil.AddTable(System.Data.DataTable,System.Collections.IList,System.Int32)">
            <summary>
            将一组<see cref="T:System.Collections.IList"/>对象转换为<see cref="T:System.Data.DataRow"/>添加到一个<see cref="T:System.Data.DataTable"/>中
            </summary>
            <param name="dataTable">要添加的<see cref="T:System.Data.DataTable"/></param>
            <param name="fromObjects">要转换的对象</param>
            <param name="offset"><see cref="T:System.Data.DataRow"/>在<see cref="T:System.Data.DataTable"/>中的偏移位置
            <para>如果<see cref="T:System.Data.DataTable"/>的总行数小于此偏移位置则是新增在最后,否则修改已有的<see cref="T:System.Data.DataRow"/></para>
            </param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Data.ObjectUtil.AddTable(System.Data.DataTable,System.Collections.IList)">
            <summary>
            将一组<see cref="T:System.Collections.IList"/>对象转换为<see cref="T:System.Data.DataRow"/>添加到一个<see cref="T:System.Data.DataTable"/>中
            </summary>
            <param name="dataTable">要添加的<see cref="T:System.Data.DataTable"/></param>
            <param name="fromObjects">要转换的对象</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Data.ObjectUtil.AddTable(System.Data.DataTable,System.Object,System.Int32)">
            <summary>
            将一个对象转换为<see cref="T:System.Data.DataRow"/>添加到一个<see cref="T:System.Data.DataTable"/>中
            </summary>
            <param name="dataTable">要添加的<see cref="T:System.Data.DataTable"/></param>
            <param name="fromObject">要转换的对象</param>
            <param name="offset"><see cref="T:System.Data.DataRow"/>在<see cref="T:System.Data.DataTable"/>中的偏移位置
            <para>如果<see cref="T:System.Data.DataTable"/>的总行数小于此偏移位置则是新增在最后,否则修改已有的<see cref="T:System.Data.DataRow"/></para>
            </param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Data.ObjectUtil.AddTable(System.Data.DataTable,System.Object)">
            <summary>
            将一个对象转换为<see cref="T:System.Data.DataRow"/>添加到一个<see cref="T:System.Data.DataTable"/>中
            </summary>
            <param name="dataTable">要添加的<see cref="T:System.Data.DataTable"/></param>
            <param name="fromObject">要转换的对象</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Data.ObjectUtil.ToTable(System.Object)">
            <summary>
            将一个对象转换为<see cref="T:System.Data.DataRow"/>添加到一个<see cref="T:System.Data.DataTable"/>中
            </summary>
            <param name="fromObject">要转换的对象</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Data.ObjectUtil.Get(System.Object,System.String)">
            <summary>
            获取一个对象<see cref="T:System.Object"/>中指定字段的值
            </summary>
            <param name="target">要取值的对象<see cref="T:System.Object"/></param>
            <param name="fieldName">要取值的属性/字段名称</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Data.ObjectUtil.Get(System.Object)">
            <summary>
            将<see cref="T:System.Object"/>转换为以下类型
            <list type="bullet">
            <item><see cref="T:Newtonsoft.Json.Linq.JToken"/></item>
            <item><see cref="T:Newtonsoft.Json.Linq.JValue"/></item>
            <item><see cref="T:Newtonsoft.Json.Linq.JProperty"/></item>
            </list>
            </summary>
            <param name="target">要转换的对象<see cref="T:System.Object"/></param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Data.ObjectUtil.Get``1(System.Object,System.String)">
            <summary>
            获取一个对象<see cref="T:System.Object"/>中指定字段的值
            </summary>
            <typeparam name="Tvalue">要转换的类型</typeparam>
            <param name="target">要取值的对象<see cref="T:System.Object"/></param>
            <param name="fieldName">要取值的属性/字段名称</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Data.ObjectUtil.GetString(System.Object,System.String)">
            <summary>
            获取一个对象<see cref="T:System.Object"/>中指定字段的<see cref="T:System.String"/>值
            </summary>
            <param name="target">要取值的对象</param>
            <param name="fieldName">要取值的属性/字段名称</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Data.ObjectUtil.GetDouble(System.Object,System.String)">
            <summary>
            获取一个对象<see cref="T:System.Object"/>中指定字段的<see cref="T:System.Double"/>值
            </summary>
            <param name="target">要取值的对象</param>
            <param name="fieldName">要取值的属性/字段名称</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Data.ObjectUtil.GetDecimal(System.Object,System.String)">
            <summary>
            获取一个对象<see cref="T:System.Object"/>中指定字段的<see cref="T:System.Decimal"/>值
            </summary>
            <param name="target">要取值的对象</param>
            <param name="fieldName">要取值的属性/字段名称</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Data.ObjectUtil.GetBoolean(System.Object,System.String)">
            <summary>
            获取一个对象<see cref="T:System.Object"/>中指定字段的<see cref="T:System.Boolean"/>值
            </summary>
            <param name="target">要取值的对象</param>
            <param name="fieldName">要取值的属性/字段名称</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Data.ObjectUtil.GetDateTime(System.Object,System.String)">
            <summary>
            获取一个对象<see cref="T:System.Object"/>中指定字段的<see cref="T:System.DateTime"/>值
            </summary>
            <param name="target">要取值的对象</param>
            <param name="fieldName">要取值的属性/字段名称</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Data.ObjectUtil.Set(System.Object,System.String,System.Object)">
            <summary>
            设置一个对象<see cref="T:System.Object"/>的某个字段的值
            </summary>
            <param name="target">要设置的对象<see cref="T:System.Object"/></param>
            <param name="fieldName">要设置值的字段名称</param>
            <param name="fieldValue">要设置的值</param>
        </member>
        <member name="M:Neko.Utility.Core.Data.ObjectUtil.Set(System.Type,System.Object,System.String,System.Object)">
            <summary>
            设置一个对象<see cref="T:System.Object"/>的某个字段的值
            </summary>
            <param name="targetType">要设置的对象<see cref="T:System.Object"/>的类型</param>
            <param name="target">要设置的对象<see cref="T:System.Object"/></param>
            <param name="fieldName">要设置值的字段名称</param>
            <param name="fieldValue">要设置的值</param>
        </member>
        <member name="T:Neko.Utility.Core.Data.RowUtil">
            <summary>
            <see cref="T:System.Data.DataRow"/>帮助类
            <para>可以对<see cref="T:System.Data.DataRow"/>进行一些快速操作</para>
            </summary>
        </member>
        <member name="M:Neko.Utility.Core.Data.RowUtil.Set(System.Data.DataRow,System.String,System.Object)">
            <summary>
            设置<see cref="T:System.Data.DataRow"/>中字段的值
            <para>如果字段不存在则会自动添加字段</para>
            </summary>
            <param name="dataRow">要设置值的<see cref="T:System.Data.DataRow"/></param>
            <param name="columnName">字段的列名</param>
            <param name="fieldValue">字段的值</param>
        </member>
        <member name="M:Neko.Utility.Core.Data.RowUtil.Get(System.Data.DataRow,System.String)">
            <summary>
            获取<see cref="T:System.Data.DataRow"/>中字段的值
            </summary>
            <param name="dataRow">要获取值的<see cref="T:System.Data.DataRow"/></param>
            <param name="columnName">要获取值的列名</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Data.RowUtil.Get(System.Data.DataRow,System.String,System.Type)">
            <summary>
            获取<see cref="T:System.Data.DataRow"/>中字段的值,并转换为指定类型
            </summary>
            <param name="dataRow">要获取值的<see cref="T:System.Data.DataRow"/></param>
            <param name="columnName">要获取值的列名</param>
            <param name="valueType">要转换的类型</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Data.RowUtil.Get``1(System.Data.DataRow,System.String)">
            <summary>
            获取<see cref="T:System.Data.DataRow"/>中字段的值,并转换为指定类型
            </summary>
            <typeparam name="Tvalue">要转换的类型</typeparam>
            <param name="dataRow">要获取值的<see cref="T:System.Data.DataRow"/></param>
            <param name="columnName">要获取值的列名</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Data.RowUtil.GetString(System.Data.DataRow,System.String)">
            <summary>
            获取<see cref="T:System.Data.DataRow"/>中字段的<see cref="T:System.String"/>值
            </summary>
            <param name="dataRow">要获取值的<see cref="T:System.Data.DataRow"/></param>
            <param name="columnName">要获取值的列名</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Data.RowUtil.GetBoolean(System.Data.DataRow,System.String)">
            <summary>
            获取<see cref="T:System.Data.DataRow"/>中字段的<see cref="T:System.Boolean"/>值
            </summary>
            <param name="dataRow">要获取值的<see cref="T:System.Data.DataRow"/></param>
            <param name="columnName">要获取值的列名</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Data.RowUtil.GetInt(System.Data.DataRow,System.String)">
            <summary>
            获取<see cref="T:System.Data.DataRow"/>中字段的<see cref="T:System.Int32"/>值
            </summary>
            <param name="dataRow">要获取值的<see cref="T:System.Data.DataRow"/></param>
            <param name="columnName">要获取值的列名</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Data.RowUtil.GetDateTime(System.Data.DataRow,System.String)">
            <summary>
            获取<see cref="T:System.Data.DataRow"/>中字段的<see cref="T:System.DateTime"/>值
            </summary>
            <param name="dataRow">要获取值的<see cref="T:System.Data.DataRow"/></param>
            <param name="columnName">要获取值的列名</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Data.RowUtil.GetDouble(System.Data.DataRow,System.String)">
            <summary>
            获取<see cref="T:System.Data.DataRow"/>中字段的<see cref="T:System.Double"/>值
            </summary>
            <param name="dataRow">要获取值的<see cref="T:System.Data.DataRow"/></param>
            <param name="columnName">要获取值的列名</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Data.RowUtil.GetDecimal(System.Data.DataRow,System.String)">
            <summary>
            获取<see cref="T:System.Data.DataRow"/>中字段的<see cref="T:System.Decimal"/>值
            </summary>
            <param name="dataRow">要获取值的<see cref="T:System.Data.DataRow"/></param>
            <param name="columnName">要获取值的列名</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Data.RowUtil.GetFirstRow(System.Data.DataTable)">
            <summary>
            获取<see cref="T:System.Data.DataTable"/>中的第一个<see cref="T:System.Data.DataRow"/>
            <para>如果<see cref="T:System.Data.DataTable"/>中没有数据行或获取不到,则会返回null</para>
            </summary>
            <param name="dataTable">要获取<see cref="T:System.Data.DataRow"/>的<see cref="T:System.Data.DataTable"/></param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Data.RowUtil.GetRow(System.Int32,System.Data.DataTable)">
            <summary>
            获取<see cref="T:System.Data.DataTable"/>中指定位置的<see cref="T:System.Data.DataRow"/>
            <para>如果<see cref="T:System.Data.DataTable"/>中没有数据行或获取不到,则会返回null</para>
            </summary>
            <param name="index"><see cref="T:System.Data.DataRow"/>的位置</param>
            <param name="dataTable">要获取<see cref="T:System.Data.DataRow"/>的<see cref="T:System.Data.DataTable"/></param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Data.RowUtil.AddColumn(System.Data.DataTable,System.String[])">
            <summary>
            给<see cref="T:System.Data.DataTable"/>添加列
            </summary>
            <param name="dataTable">要添加列的<see cref="T:System.Data.DataTable"/></param>
            <param name="columnNames">要添加的列名(可以是多个)</param>
        </member>
        <member name="M:Neko.Utility.Core.Data.RowUtil.AddColumn(System.Data.DataTable,System.Data.DataColumn[])">
            <summary>
            给<see cref="T:System.Data.DataTable"/>添加列
            </summary>
            <param name="dataTable">要添加列的<see cref="T:System.Data.DataTable"/></param>
            <param name="dataColumns">要添加的列名(可以是多个)</param>
        </member>
        <member name="T:Neko.Utility.Core.Data.StringUtil">
            <summary>
            字符串帮助类
            <para>可以对字符串进行一些快速操作</para>
            </summary>
        </member>
        <member name="M:Neko.Utility.Core.Data.StringUtil.IsNullOrEmpty(System.Object)">
            <summary>
            判断一个对象是否为空
            </summary>
            <param name="value">要判断的对象</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Data.StringUtil.CompareType(System.Type,System.String)">
            <summary>
            对比两个类型
            </summary>
            <param name="fromType">要对比的类型1</param>
            <param name="typeName">要对比的类型2的类型名称<see cref="P:System.Type.FullName"/></param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Data.StringUtil.CompareType(System.Type,System.Type)">
            <summary>
            对比两个类型
            </summary>
            <param name="fromType">要对比的类型1</param>
            <param name="toType">要对比的类型2</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Data.StringUtil.SafeCompare(System.Object,System.Object)">
            <summary>
            比较两个对象是否相等
            </summary>
            <param name="fromValue">要比较的对象1</param>
            <param name="toValue">要比较的对象2</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Data.StringUtil.SafeCompare(System.String,System.String)">
            <summary>
            比较两个字符串是否相等
            </summary>
            <param name="fromValue">要比较的字符串1</param>
            <param name="toValue">要比较的字符串2</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Data.StringUtil.SafeCompare(System.Object,System.Object,System.Boolean)">
            <summary>
            比较两个对象是否相等
            <para>将会把两个对象转换为字符串<see cref="M:System.Object.ToString"/>来进行比较</para>
            </summary>
            <param name="fromValue">要比较的对象1</param>
            <param name="toValue">要比较的对象2</param>
            <param name="ignoreCase">是否忽略大小写</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Data.StringUtil.SafeCompare(System.String,System.String,System.Boolean)">
            <summary>
            比较两个字符串是否相等
            </summary>
            <param name="fromValue">要比较的字符串1</param>
            <param name="toValue">要比较的字符串2</param>
            <param name="ignoreCase">是否忽略大小写</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Data.StringUtil.GetTimeStamp">
            <summary>
            获取当前UTC时间的十三位的Unix时间戳
            </summary>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Data.StringUtil.GetTimeStamp(System.DateTime)">
            <summary>
            获取指定时间的十三位的Unix时间戳
            </summary>
            <param name="time">要获取时间戳的时间</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Data.StringUtil.GetTimeStamp(System.String)">
            <summary>
            将十三位的Unix时间戳转换为日期时间
            </summary>
            <param name="timeStamp">要转换的Unix时间戳</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Data.StringUtil.Get(System.Type,System.Object)">
            <summary>
            将对象转换为特定类型的格式
            <list type="bullet">
            <item>转换失败将返回类型的默认值</item>
            <item>无法转换将返回对象本身</item>
            </list>
            </summary>
            <param name="targetType">指定的类型</param>
            <param name="value">要转换的对象</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Data.StringUtil.Get``1(System.Object)">
            <summary>
            将对象转换为特定类型的格式
            <list type="bullet">
            <item>转换失败将返回类型的默认值</item>
            <item>无法转换将返回对象本身</item>
            </list>
            </summary>
            <typeparam name="TObject">指定的类型</typeparam>
            <param name="value">要转换的对象</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Data.StringUtil.GetString(System.Object)">
            <summary>
            将对象转换为<see cref="T:System.String"/>类型
            </summary>
            <param name="value">要转换的对象</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Data.StringUtil.GetBoolean(System.Object)">
            <summary>
            将对象转换为<see cref="T:System.Boolean"/>类型
            </summary>
            <param name="value">要转换的对象</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Data.StringUtil.GetBoolean(System.Object,System.Boolean)">
            <summary>
            将对象转换为<see cref="T:System.Boolean"/>类型
            </summary>
            <param name="value">要转换的对象</param>
            <param name="defaultValue">转换失败时返回的默认值</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Data.StringUtil.GetInt(System.Object)">
            <summary>
            将对象转换为<see cref="T:System.Int32"/>类型
            </summary>
            <param name="value">要转换的对象</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Data.StringUtil.GetDateTime(System.Object)">
            <summary>
            将对象转换为<see cref="!:DateTime?"/>类型
            </summary>
            <param name="value">要转换的对象</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Data.StringUtil.GetDouble(System.Object)">
            <summary>
            将对象转换为<see cref="T:System.Double"/>类型
            </summary>
            <param name="value">要转换的对象</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Data.StringUtil.GetDecimal(System.Object)">
            <summary>
            将对象转换为<see cref="T:System.Decimal"/>类型
            </summary>
            <param name="value">要转换的对象</param>
            <returns></returns>
        </member>
        <member name="T:Neko.Utility.Core.EmptyDelegateCode">
            <summary>
            无参的委托方法
            </summary>
        </member>
        <member name="T:Neko.Utility.Core.EmptyDelegateCode`1">
            <summary>
            无参的委托方法
            </summary>
            <typeparam name="TReturn">返回值类型</typeparam>
            <returns></returns>
        </member>
        <member name="T:Neko.Utility.Core.ParameterDelegateCode">
            <summary>
            有参的委托方法
            </summary>
            <typeparam name="T">参数类型</typeparam>
            <param name="args">参数</param>
        </member>
        <member name="T:Neko.Utility.Core.IO.Logging.Logger">
            <summary>
            记录日志类
            <para>注意:此日志类默认的记录日志文件路径与<see cref="!:Neko.Logging.Core"/>
            的日志文件相冲突,<br/>建议不要一起使用以避免不必要的麻烦
            </para>
            </summary>
        </member>
        <member name="F:Neko.Utility.Core.IO.Logging.Logger._logConfiguration">
            <summary>
            日志配置信息
            </summary>
        </member>
        <member name="F:Neko.Utility.Core.IO.Logging.Logger._getNow">
            <summary>
            获取日志记录的时间的委托方法
            </summary>
        </member>
        <member name="F:Neko.Utility.Core.IO.Logging.Logger._startTime">
            <summary>
            保存开始记录日志的时间
            </summary>
        </member>
        <member name="F:Neko.Utility.Core.IO.Logging.Logger._endTime">
            <summary>
            保存结束记录日志的时间
            </summary>
        </member>
        <member name="F:Neko.Utility.Core.IO.Logging.Logger._timeConsuming">
            <summary>
            日志记录周期耗时(单位:毫秒)
            <para>开始调用这个类直到下次调用<see cref="M:Neko.Utility.Core.IO.Logging.Logger.Commit(Neko.Utility.Core.Configurations.LogLevel,System.String,System.Object[])"/>的时间</para>
            </summary>
        </member>
        <member name="F:Neko.Utility.Core.IO.Logging.Logger._totalTimeConsuming">
            <summary>
            日志记录总耗时(单位:毫秒)
            <para>开始调用这个类直到下次调用<see cref="M:Neko.Utility.Core.IO.Logging.Logger.WriteLog"/>的时间</para>
            </summary>
        </member>
        <member name="F:Neko.Utility.Core.IO.Logging.Logger._logMessage">
            <summary>
            日志内容
            </summary>
        </member>
        <member name="F:Neko.Utility.Core.IO.Logging.Logger._logQueue">
            <summary>
            日志队列
            </summary>
        </member>
        <member name="M:Neko.Utility.Core.IO.Logging.Logger.Reset">
            <summary>
            重置日志信息
            </summary>
        </member>
        <member name="M:Neko.Utility.Core.IO.Logging.Logger.Begin(System.String)">
            <summary>
            开始记录日志,初始化<see cref="F:Neko.Utility.Core.IO.Logging.Logger._startTime"/>
            </summary>
            <param name="logTitle">日志标题</param>
        </member>
        <member name="M:Neko.Utility.Core.IO.Logging.Logger.Commit(Neko.Utility.Core.Configurations.LogLevel,System.String,System.Object[])">
            <summary>
            提交日志信息
            <para>如果要输出日志,请使用<see cref="M:Neko.Utility.Core.IO.Logging.Logger.WriteLog"/>方法</para>
            </summary>
            <param name="logLevel">日志等级</param>
            <param name="logMessage">日志信息</param>
            <param name="messageParameters">日志信息的参数</param>
        </member>
        <member name="M:Neko.Utility.Core.IO.Logging.Logger.Commit(Neko.Utility.Core.Configurations.LogLevel,System.String,System.Exception)">
            <summary>
            提交日志信息
            <para>如果要输出日志,请使用<see cref="M:Neko.Utility.Core.IO.Logging.Logger.WriteLog"/>方法</para>
            </summary>
            <param name="logLevel">日志等级</param>
            <param name="logMessage">日志信息</param>
            <param name="innerException">错误信息</param>
        </member>
        <member name="M:Neko.Utility.Core.IO.Logging.Logger.Commit">
            <summary>
            提交日志信息
            <para>如果要输出日志,请使用<see cref="M:Neko.Utility.Core.IO.Logging.Logger.WriteLog"/>方法</para>
            </summary>
        </member>
        <member name="M:Neko.Utility.Core.IO.Logging.Logger.CommitTrack(System.String,System.Object[])">
            <summary>
            提交<inheritdoc cref="F:Neko.Utility.Core.Configurations.LogLevel.Track"/>
            <para>如果要输出日志,请使用<see cref="M:Neko.Utility.Core.IO.Logging.Logger.WriteLog"/>方法</para>
            </summary>
            <param name="logMessage">日志信息</param>
            <param name="messageParameters">日志信息的参数</param>
        </member>
        <member name="M:Neko.Utility.Core.IO.Logging.Logger.CommitInformation(System.String,System.Object[])">
            <summary>
            提交<inheritdoc cref="F:Neko.Utility.Core.Configurations.LogLevel.Information"/>
            <para>如果要输出日志,请使用<see cref="M:Neko.Utility.Core.IO.Logging.Logger.WriteLog"/>方法</para>
            </summary>
            <param name="logMessage">日志信息</param>
            <param name="messageParameters">日志信息的参数</param>
        </member>
        <member name="M:Neko.Utility.Core.IO.Logging.Logger.CommitWarning(System.String,System.Object[])">
            <summary>
            提交<inheritdoc cref="F:Neko.Utility.Core.Configurations.LogLevel.Warning"/>
            <para>如果要输出日志,请使用<see cref="M:Neko.Utility.Core.IO.Logging.Logger.WriteLog"/>方法</para>
            </summary>
            <param name="logMessage">日志信息</param>
            <param name="messageParameters">日志信息的参数</param>
        </member>
        <member name="M:Neko.Utility.Core.IO.Logging.Logger.CommitException(System.String,System.Object[])">
            <summary>
            提交<inheritdoc cref="F:Neko.Utility.Core.Configurations.LogLevel.Exception"/>
            <para>如果要输出日志,请使用<see cref="M:Neko.Utility.Core.IO.Logging.Logger.WriteLog"/>方法</para>
            </summary>
            <param name="logMessage">日志信息</param>
            <param name="messageParameters">日志信息的参数</param>
        </member>
        <member name="M:Neko.Utility.Core.IO.Logging.Logger.CommitException(System.Exception)">
            <summary>
            提交<inheritdoc cref="F:Neko.Utility.Core.Configurations.LogLevel.Exception"/>
            <para>如果要输出日志,请使用<see cref="M:Neko.Utility.Core.IO.Logging.Logger.WriteLog"/>方法</para>
            </summary>
            <param name="innerException">异常信息</param>
        </member>
        <member name="M:Neko.Utility.Core.IO.Logging.Logger.WriteLog">
            <summary>
            输出日志到日志文件
            </summary>
        </member>
        <member name="T:Neko.Utility.Core.IO.Logging.LogInfo">
            <summary>
            日志信息实体类
            </summary>
        </member>
        <member name="P:Neko.Utility.Core.IO.Logging.LogInfo.LogTime">
            <summary>
            记录日志的时间
            </summary>
        </member>
        <member name="P:Neko.Utility.Core.IO.Logging.LogInfo.LogMessage">
            <summary>
            记录日志的信息
            </summary>
        </member>
        <member name="P:Neko.Utility.Core.IO.Logging.LogInfo.InnerException">
            <summary>
            记录的异常信息
            </summary>
        </member>
        <member name="P:Neko.Utility.Core.IO.Logging.LogInfo.LogCount">
            <summary>
            短时间内同一日志出现的次数
            </summary>
        </member>
        <member name="P:Neko.Utility.Core.IO.Logging.LogInfo.LogLevel">
            <summary>
            日志等级
            </summary>
        </member>
        <member name="T:Neko.Utility.Core.IO.Logging.LogUtil">
            <summary>
            日志帮助类
            <para>输出日志信息到文件</para>
            </summary>
        </member>
        <member name="F:Neko.Utility.Core.IO.Logging.LogUtil._logCache">
            <summary>
            历史日志缓存
            </summary>
        </member>
        <member name="F:Neko.Utility.Core.IO.Logging.LogUtil._logQueue">
            <summary>
            输出日志队列
            </summary>
        </member>
        <member name="F:Neko.Utility.Core.IO.Logging.LogUtil._logConfiguration">
            <summary>
            日志配置信息
            </summary>
        </member>
        <member name="P:Neko.Utility.Core.IO.Logging.LogUtil.OnWriteLog">
            <summary>
            正在输出日志委托方法
            </summary>
        </member>
        <member name="M:Neko.Utility.Core.IO.Logging.LogUtil.StartLog">
            <summary>
            开启线程输出日志到文件
            </summary>
        </member>
        <member name="M:Neko.Utility.Core.IO.Logging.LogUtil.WriteInformation(System.String,System.Object[])">
            <summary>
            记录<inheritdoc cref="F:Neko.Utility.Core.Configurations.LogLevel.Information"/>
            </summary>
            <param name="logMessage">日志信息</param>
            <param name="messageParameters">日志信息的参数</param>
        </member>
        <member name="M:Neko.Utility.Core.IO.Logging.LogUtil.WriteWarning(System.Exception,System.String,System.Object[])">
            <summary>
            记录<inheritdoc cref="F:Neko.Utility.Core.Configurations.LogLevel.Warning"/>
            </summary>
            <param name="warningException">可能会发生的异常</param>
            <param name="logMessage">日志信息</param>
            <param name="messageParameters">日志信息的参数</param>
        </member>
        <member name="M:Neko.Utility.Core.IO.Logging.LogUtil.WriteException(System.Exception,System.String)">
            <summary>
            记录<inheritdoc cref="F:Neko.Utility.Core.Configurations.LogLevel.Exception"/>
            </summary>
            <param name="innerException">异常信息</param>
            <param name="caption">错误提示</param>
        </member>
        <member name="M:Neko.Utility.Core.IO.Logging.LogUtil.WriteLog(Neko.Utility.Core.Configurations.LogLevel,System.String,System.Exception)">
            <summary>
            记录日志
            </summary>
            <param name="logLevel">日志类型</param>
            <param name="logMessage">日志信息</param>
            <param name="innerException">异常信息</param>
        </member>
        <member name="M:Neko.Utility.Core.IO.Logging.LogUtil.WriteLog(Neko.Utility.Core.IO.Logging.LogInfo)">
            <summary>
            添加日志到输出日志队列
            </summary>
            <param name="logInfo">日志信息实体类</param>
        </member>
        <member name="M:Neko.Utility.Core.IO.Logging.LogUtil.Enqueue(Neko.Utility.Core.IO.Logging.LogInfo)">
            <summary>
            添加日志到输出日志队列
            </summary>
            <param name="logInfo">日志信息实体类</param>
        </member>
        <member name="T:Neko.Utility.Core.Threading.IntervalInfo">
            <summary>
            线程信息的实体类对象
            </summary>
        </member>
        <member name="P:Neko.Utility.Core.Threading.IntervalInfo.CurrentThread">
            <summary>
            当前线程
            </summary>
        </member>
        <member name="P:Neko.Utility.Core.Threading.IntervalInfo.Interval">
            <summary>
            线程循环执行时的间隔时间（单位:毫秒）
            </summary>
        </member>
        <member name="P:Neko.Utility.Core.Threading.IntervalInfo.ExecuteCode">
            <summary>
            线程要执行的方法
            </summary>
        </member>
        <member name="P:Neko.Utility.Core.Threading.IntervalInfo.Break">
            <summary>
            是否中断
            </summary>
        </member>
        <member name="T:Neko.Utility.Core.Threading.ThreadUtil">
            <summary>
            线程帮助类
            <para>一些线程的快速操作</para>
            </summary>
        </member>
        <member name="M:Neko.Utility.Core.Threading.ThreadUtil.Sleep(System.Int32)">
            <summary>
            <inheritdoc cref="M:System.Threading.Thread.Sleep(System.Int32)"/>
            </summary>
            <param name="interval">休眠时间</param>
        </member>
        <member name="M:Neko.Utility.Core.Threading.ThreadUtil.RunThread(Neko.Utility.Core.EmptyDelegateCode)">
            <summary>
            创建并运行一个新线程
            </summary>
            <param name="executeCode">线程要执行的方法</param>
            <returns></returns>
        </member>
        <member name="M:Neko.Utility.Core.Threading.ThreadUtil.RunLoop(Neko.Utility.Core.Threading.IntervalInfo)">
            <summary>
            创建并循环执行一个线程
            </summary>
            <param name="intervalInfo">线程信息</param>
            <returns></returns>
        </member>
    </members>
</doc>
